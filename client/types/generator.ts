import { DataTypeGenerationOptions, ExportType, ExportTypeGenerationOptions } from '../_plugins';
import { GDLocale } from '~types/general';

export { CountryNameFiles } from '../_namePlugins';
export { DataTypeGenerationOptions, ExportType, ExportTypeGenerationOptions };

/**
 * This is the public type for what users supply to the generation method.
 *
 * It types the structure of an entire data set for being generated: the rows of Data Types with their unique
 * options and whatever Export Type and settings have been chosen. This is the data structure generated by the
 * UI after constructing whatever the user wants.
 */
export type DataSetConfig = {
	rows: DataTypeGenerationOptions[];
	exportType: ExportTypeGenerationOptions;
}

/**
 * Also the main public interface.
 *
 * Settings custom to the particular generation action. This is used in combination with DataSetConfig.
 */
export type GenerationSettings = {
	rows: number; // The number of rows to be generated

	// optional
	locale?: GDLocale;
	stripWhitespace?: boolean; // default: false
	generationType?: 'returnValue' | 'file'; // default: returnValue
	filename?: string; // the filename to generate
	folder?: string; // the folder where the data is generated
	packetSize?: 100; // the size of the generated packets
	onError?: (err: any) => void;
	onPacketComplete?: (result: any) => void;
}

// Bad name but can't think of a better one. This is the interface required for the Data Type and Export Type
// code for performing a unit of generation. It's a consistent interface used by both web workers and node code
export type WorkerInterface = {
	send: (data: any) => void;
	onSuccess: (data: any) => void;
	onError: (data: any) => void;
};

export type UnchangedGenerationData = {
	[colIndex: number]: string; // colIndex => row ID (unique GUID)
}

export type DataTypeWorkerInterface = {
	[worker: string]: WorkerInterface; // TODO is the worker the URL?
};

export type DataTypeBatchGeneratedPayload = {
	completedBatchNum: number;
	numGeneratedRows: number;
	numResults: number;
	generatedData: any;
};
