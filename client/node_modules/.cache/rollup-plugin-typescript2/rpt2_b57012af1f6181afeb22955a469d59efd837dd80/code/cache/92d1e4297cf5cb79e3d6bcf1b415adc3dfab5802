{"code":"// import { getRandomArrayValue } from '../../../utils/randomUtils';\r\n// data: GenerationData\r\nexport var generate = function () {\r\n    // const selectedCardData = getRandomArrayValue(cardData);\r\n    // $generatedCardNumber = DataType_PAN::generateCreditCardNumber($cardData[\"prefix\"], $cardData[\"length\"]);\r\n    // $characters = array(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"J\",\"K\",\"L\",\"M\",\"N\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\");\r\n    // $totalChars = count($characters);\r\n    // $chars = array();\r\n    // while (count($chars) < 4) {\r\n    // \t$char = $characters[mt_rand(0, $totalChars-1)];\r\n    // \tif (!in_array($char, $chars)) {\r\n    // \t\t$chars[] = $char;\r\n    // \t}\r\n    // }\r\n    // $calendar = date(\"ym\", mt_rand());\r\n    // $serviceCode = mt_rand(111, 999);\r\n    // $discretionaryData = array(rand(1, 9), rand(111, 999), rand(1111, 9999));\r\n    // $disc_data = array_rand($discretionaryData);\r\n    // $LRC_array = array(\" \", rand(1, 9));\r\n    // $LRC = array_rand($LRC_array);\r\n    // $firstName = $this->firstNames[mt_rand(0, $this->numFirstNames-1)];\r\n    // $lastName  = $this->lastNames[mt_rand(0, $this->numLastNames-1)];\r\n    /*\r\n        Source - http://en.wikipedia.org/wiki/Magnetic_stripe_card#Financial_cards\r\n\n        Start sentinel — one character (generally '%')\r\n        Format code = \"B\" — one character (alpha only)\r\n        Primary account number (PAN) — up to 19 characters. Usually, but not always, matches the credit card number\r\n            printed on the front of the card.\r\n        Field Separator — one character (generally '^')\r\n        Name — two to 26 characters\r\n        Field Separator — one character (generally '^')\r\n        Expiration date — four characters in the form YYMM.\r\n        Service code — three characters\r\n        Discretionary data — may include Pin Verification Key Indicator (PVKI, 1 character), PIN Verification\r\n            Value (PVV, 4 characters), Card Verification \tValue or Card Verification Code (CVV or CVC, 3 characters)\r\n        End sentinel — one character (generally '?')\r\n        Longitudinal redundancy check (LRC) — it is one character and a validity character calculated from other\r\n            data on the track.\r\n    */\r\n    var track1 = \"%B$generatedCardNumber^{$firstName}{$lastName}^$calendar$serviceCode{$discretionaryData[$disc_data]}?$LRC_array[$LRC]\";\r\n    return {\r\n        display: track1\r\n    };\r\n};\r\nexport var getMetadata = function () { return ({\r\n    sql: {\r\n        field: 'varchar(255)',\r\n        field_Oracle: 'varchar2(255)',\r\n        field_MSSQL: 'VARCHAR(255) NULL'\r\n    }\r\n}); };\r\n/*\r\n    public function __construct($runtimeContext) {\r\n        for ($i=622126; $i<=622925; $i++){\r\n            $this->prefixList[\"prefix\"][] = $i;\r\n        }\r\n        for ($i=3528; $i<=3589; $i++){\r\n            $this->prefixList[\"jcb16\"][] = $i;\r\n        }\r\n        parent::__construct($runtimeContext);\r\n\n        if (class_exists(\"DataType_PAN\")) {\r\n            $this->cardData = DataType_PAN::getAllCreditCardData();\r\n        }\r\n\n        if (class_exists(\"DataType_Names\")) {\r\n            $names = new DataType_Names(\"generation\");\r\n            $this->firstNames = $names->getFirstNames();\r\n            $this->numFirstNames = count($this->firstNames);\r\n            $this->lastNames = $names->getLastNames();\r\n            $this->numLastNames = count($this->lastNames);\r\n        }\r\n    }\r\n}\r\n*/\r\n//# sourceMappingURL=Track1.generator.js.map","references":["/Users/benkeen/generatedata/client/types/dataTypes.d.ts"],"map":"{\"version\":3,\"file\":\"Track1.generator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/plugins/dataTypes/Track1/Track1.generator.ts\"],\"names\":[],\"mappings\":\"AACA,oEAAoE;AAEpE,uBAAuB;AACvB,MAAM,CAAC,IAAM,QAAQ,GAAG;IACvB,0DAA0D;IAC1D,2GAA2G;IAE3G,wHAAwH;IACxH,oCAAoC;IACpC,oBAAoB;IACpB,8BAA8B;IAC9B,mDAAmD;IACnD,mCAAmC;IACnC,sBAAsB;IACtB,KAAK;IACL,IAAI;IAEJ,qCAAqC;IACrC,oCAAoC;IACpC,4EAA4E;IAC5E,+CAA+C;IAC/C,uCAAuC;IACvC,iCAAiC;IACjC,sEAAsE;IACtE,oEAAoE;IAEpE;;;;;;;;;;;;;;;;;MAiBE;IACF,IAAM,MAAM,GAAG,uHAAuH,CAAC;IAEvI,OAAO;QACN,OAAO,EAAE,MAAM;KACf,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,WAAW,GAAG,cAAkB,OAAA,CAAC;IAC7C,GAAG,EAAE;QACJ,KAAK,EAAE,cAAc;QACrB,YAAY,EAAE,eAAe;QAC7B,WAAW,EAAE,mBAAmB;KAChC;CACD,CAAC,EAN2C,CAM3C,CAAC;AAEH;;;;;;;;;;;;;;;;;;;;;;;EAuBE\"}"}
