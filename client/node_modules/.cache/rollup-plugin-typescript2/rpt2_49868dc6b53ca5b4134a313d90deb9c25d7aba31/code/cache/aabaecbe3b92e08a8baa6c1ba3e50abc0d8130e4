{"code":"// data: GenerationData\r\nexport var generate = function () {\r\n    return { display: '' };\r\n};\r\nexport var getMetadata = function () {\r\n    // Called before separator is set, so margin should be used\r\n    // $len = 10 + strlen(static::$sep);\r\n    var len = 11; // Should be enough, allow for max one char sep\r\n    return {\r\n        sql: {\r\n            field: \"varchar(\" + len + \") default NULL\",\r\n            field_Oracle: \"varchar2(\" + len + \") default NULL\",\r\n            field_MSSQL: \"VARCHAR(\" + len + \") NULL\"\r\n        }\r\n    };\r\n};\r\n/*\r\n    private $generatedOrgNrs = array();\r\n    static $sep = \"-\";\r\n\n     * Generate a random personal number, and return the display string and additional meta data for use\r\n     * by any other Data Type.\r\n    public function generate($generator, $generationContextData) {\r\n        $generationOptions = $generationContextData[\"generationOptions\"];\r\n\n        // Default, 10 siffers + '-'\r\n        // TODO: support several countries?\r\n                static::$sep = self::getOrganisationNumberSeparator($generationOptions[\"cc_separator\"]);\r\n\n        $orgnr = $this->generateRandomSwedishOrganisationNumber(static::$sep);\r\n\n        // pretty sodding unlikely, but just in case!\r\n        while (in_array($orgnr, $this->generatedOrgNrs)) {\r\n            $orgnr = $this->generateRandomSwedishOrganisationNumber(static::$sep);\r\n        }\r\n        $this->generatedOrgNrs[] = $orgnr;\r\n        return array(\r\n            \"display\" => $orgnr\r\n        );\r\n    }\r\n\n    // TODO: add support for separator\r\n    // TODO: add support for organisation numbers\r\n    private static function generateRandomSwedishOrganisationNumber($sep) {\r\n        $new_str = \"\";\r\n        $rand = 0;\r\n\n        $cnt = 11;\t// 10 siffers + 1 increment for separator\r\n\n        for ($i=0; $i<$cnt; $i++) {\r\n            switch ($i) {\r\n                case 0:\r\n                    $rand = mt_rand(0, 99);\r\n                    $new_str .= sprintf(\"%02d\", $rand);\r\n                    break;\r\n                case 2:\r\n                    $rand = mt_rand(20, 99);\r\n                    $new_str .= sprintf(\"%02d\", $rand);\r\n                    break;\r\n                case 4:\r\n                    $rand = mt_rand(0, 99);\r\n                    $new_str .= sprintf(\"%02d\", $rand);\r\n                    break;\r\n                case 6:\r\n                    $new_str .= $sep;\r\n                    break;\r\n                case 7:\r\n                    $rand = mt_rand(0, 999);\r\n                    $new_str .= sprintf(\"%03d\", $rand);\r\n                    break;\r\n                case 10:\r\n                    // Same calculation as for personal numbers\r\n                    // TODO: move to Utils??\r\n                    $ctrl = DataType_PersonalNumber::recalcCtrl($new_str . \"0\", $sep);\r\n                    $new_str .= sprintf(\"%01d\", $ctrl);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\n        return $new_str;\r\n    }\r\n\n    private static function getOrganisationNumberSeparator($separators) {\r\n        $separatorList = explode(\"|\", $separators);\r\n        $chosenSep = $separatorList[rand(0, count($separatorList)-1)];\r\n\n        // if no separator was entered use '' as default\r\n        if ($separators == \"\") {\r\n            $chosenSep = \"\";\r\n        }\r\n        return $chosenSep;\r\n    }\r\n\n*/\r\n//# sourceMappingURL=OrganizationNumber.generator.js.map","references":["/Users/benkeen/generatedata/types/dataTypes.d.ts"],"map":"{\"version\":3,\"file\":\"OrganizationNumber.generator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/plugins/dataTypes/OrganizationNumber/OrganizationNumber.generator.ts\"],\"names\":[],\"mappings\":\"AAEA,uBAAuB;AACvB,MAAM,CAAC,IAAM,QAAQ,GAAG;IACvB,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,WAAW,GAAG;IAC1B,2DAA2D;IAC3D,oCAAoC;IACpC,IAAM,GAAG,GAAG,EAAE,CAAC,CAAC,+CAA+C;IAC/D,OAAO;QACN,GAAG,EAAE;YACJ,KAAK,EAAE,aAAW,GAAG,mBAAgB;YACrC,YAAY,EAAE,cAAY,GAAG,mBAAgB;YAC7C,WAAW,EAAE,aAAW,GAAG,WAAQ;SACnC;KACD,CAAC;AACH,CAAC,CAAC;AAGF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+EE\"}"}
