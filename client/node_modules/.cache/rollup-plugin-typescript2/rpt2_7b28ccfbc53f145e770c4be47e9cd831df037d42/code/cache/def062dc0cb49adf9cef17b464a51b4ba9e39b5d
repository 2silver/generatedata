{"code":"export var generate = function () {\r\n    return { display: '' };\r\n};\r\nexport var getMetadata = function () {\r\n    // Called before separator is set, so margin should be used\r\n    // $len = 12 + strlen(static::$sep);\r\n    var len = 13; // should be enough, allow for max one char sep\r\n    return {\r\n        sql: {\r\n            field: \"varchar(\" + len + \") default NULL\",\r\n            field_Oracle: \"varchar2(\" + len + \") default NULL\",\r\n            field_MSSQL: \"VARCHAR(\" + len + \") NULL\"\r\n        }\r\n    };\r\n};\r\n/*\r\n    protected $isEnabled = true;\r\n    protected $dataTypeName = \"PersonalNumber\";\r\n    protected $dataTypeFieldGroup = \"humanData\";\r\n    protected $dataTypeFieldGroupOrder = 110;\r\n    protected $jsModules = array(\"PersonalNumber.js\");\r\n    private $generatedPersonnrs = array();\r\n\n    // Separator in personal number\r\n    static $sep = \"-\";\r\n\n\n    // Generate a random personal number, and return the display string and additional meta data for use\r\n    // by any other Data Type.\r\n    public function generate($generator, $generationContextData) {\r\n        $generationOptions = $generationContextData[\"generationOptions\"];\r\n\n        // Default, 12 siffers + '-'\r\n        // TODO: Option for 12 siffers without '-'\r\n        // TODO: more options? (not 10 siffers since it could generate real personal number)\r\n        // TODO: support several countries?\r\n                static::$sep = self::getPersonalNumberSeparator($generationOptions[\"cc_separator\"]);\r\n        $personnr = $this->generateRandomSwedishPersonalNumber(static::$sep);\r\n\n        // pretty sodding unlikely, but just in case!\r\n        while (in_array($personnr, $this->generatedPersonnrs)) {\r\n            $personnr = $this->generateRandomSwedishPersonalNumber(static::$sep);\r\n        }\r\n        $this->generatedPersonnrs[] = $personnr;\r\n        return array(\r\n            \"display\" => $personnr\r\n        );\r\n    }\r\n\n    // TODO: add support for separator\r\n    // TODO: add support for organisation numbers\r\n    private static function generateRandomSwedishPersonalNumber($sep) {\r\n        $new_str = \"16\";\r\n        $cnt = 13;\t// 12 siffers + 1 increment for separator\r\n\n        for ($i=2; $i<$cnt; $i++) {\r\n            switch ($i) {\r\n                case 2:\r\n                    $rand = mt_rand(0, 99);\r\n                    $new_str .= sprintf(\"%02d\", $rand);\r\n                    break;\r\n                case 4:\r\n                    $rand = mt_rand(1, 12);\r\n                    $new_str .= sprintf(\"%02d\", $rand);\r\n                    break;\r\n                case 6:\r\n                    $rand = mt_rand(1, 30);\r\n                    $new_str .= sprintf(\"%02d\", $rand);\r\n                    break;\r\n                case 8:\r\n                    $new_str .= $sep;\r\n                    break;\r\n                case 9:\r\n                    $rand = mt_rand(0, 999);\r\n                    $new_str .= sprintf(\"%03d\", $rand);\r\n                    break;\r\n                case 12:\r\n                    $ctrl = static::recalcCtrl($new_str . \"0\", $sep);\r\n                    $new_str .= sprintf(\"%01d\", $ctrl);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\n        return $new_str;\r\n    }\r\n\n    // Function to recalculate control siffer in swedish personal number\r\n    public static function recalcCtrl($idNumber, $separator) {\r\n        $strArr = explode($separator, $idNumber);\r\n        $idNr = \"\";\r\n        for ($i=0; $i<count($strArr); $i++) {\r\n            $idNr .= $strArr[$i];\r\n        }\r\n\n        $idNrArr = str_split($idNr);\r\n\n        // Ogiltig lÃ¤ngd\r\n        if (!((strlen($idNr) == 12) || (strlen($idNr) == 10))) {\r\n            return 99;\r\n        }\r\n\n        // OK, 12 siffers (person) or 10 siffers (organisation), recalculate control siffer\r\n        $sum = 0;\r\n\n        for ($i = strlen($idNr) - 10; $i< strlen($idNr) - 1; $i++) {\r\n            if ($i%2 == 0) {\r\n                $siffra = intval($idNrArr[$i]);\r\n                $partSum = $siffra * 2;\r\n                if ($partSum >= 10) {\r\n                    $partSum = (int)($partSum / 10) + ($partSum % 10);\r\n                }\r\n            } else {\r\n                $partSum = intval($idNrArr[$i]);\r\n            }\r\n            $sum += $partSum;\r\n        }\r\n\n        $ctrl = (10 - ($sum % 10)) % 10;\r\n\n        return $ctrl;\r\n    }\r\n\n\n    private static function getPersonalNumberSeparator($separators) {\r\n        $separatorList = explode(\"|\", $separators);\r\n        $chosenSep = $separatorList[rand(0, count($separatorList)-1)];\r\n\n        // if no separator was entered use '' as default\r\n        if ($separators == \"\") {\r\n            $chosenSep = \"\";\r\n        }\r\n        return $chosenSep;\r\n    }\r\n\n    public function getRowGenerationOptionsUI($generator, $postdata, $colNum, $numCols) {\r\n        return array(\r\n            \"cc_separator\" => $postdata[\"dtOptionPersonalNumber_sep_$colNum\"]\r\n        );\r\n    }\r\n\n*/\r\n//# sourceMappingURL=PersonalNumber.generator.js.map","references":["/Users/benkeen/generatedata/client/types/dataTypes.d.ts"],"map":"{\"version\":3,\"file\":\"PersonalNumber.generator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/plugins/dataTypes/PersonalNumber/PersonalNumber.generator.ts\"],\"names\":[],\"mappings\":\"AAEA,MAAM,CAAC,IAAM,QAAQ,GAAG;IACvB,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,WAAW,GAAG;IAC1B,2DAA2D;IAC3D,oCAAoC;IACpC,IAAM,GAAG,GAAG,EAAE,CAAC,CAAC,+CAA+C;IAC/D,OAAO;QACN,GAAG,EAAE;YACJ,KAAK,EAAE,aAAW,GAAG,mBAAgB;YACrC,YAAY,EAAE,cAAY,GAAG,mBAAgB;YAC7C,WAAW,EAAE,aAAW,GAAG,WAAQ;SACnC;KACD,CAAC;AACH,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+HE\"}"}
