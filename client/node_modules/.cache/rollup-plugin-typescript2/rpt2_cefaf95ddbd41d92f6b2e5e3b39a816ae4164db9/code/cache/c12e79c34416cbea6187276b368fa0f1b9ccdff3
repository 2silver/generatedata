{"code":"export var generate = function () {\r\n    return { display: '' };\r\n};\r\nvar utilsLoaded = false;\r\nvar onmessage = function (e) {\r\n    if (!utilsLoaded) {\r\n        importScripts(e.data.workerResources.workerUtils);\r\n        utilsLoaded = true;\r\n    }\r\n    postMessage(generate());\r\n};\r\n/* private $cardData;\r\n\n    public function __construct($runtimeContext) {\r\n        for ($i=622126; $i<=622925; $i++){\r\n            $this->prefixList[\"prefix\"][] = $i;\r\n        }\r\n        for ($i=3528; $i<=3589; $i++){\r\n            $this->prefixList[\"jcb16\"][] = $i;\r\n        }\r\n        parent::__construct($runtimeContext);\r\n\n        if (class_exists(\"DataType_PAN\")) {\r\n            $this->cardData = DataType_PAN::getAllCreditCardData();\r\n        }\r\n    }\r\n\n\n    public function generate($generator, $generationContextData) {\r\n        $cardData = $this->cardData[array_rand($this->cardData)];\r\n        $generatedCardNumber = DataType_PAN::generateCreditCardNumber($cardData[\"prefix\"], $cardData[\"length\"]);\r\n\n        $calendar = date(\"ym\", mt_rand());\r\n        $serviceCode = mt_rand(111, 999);\r\n        $discretionaryData = array(rand(1, 9),rand(111, 999), rand(1111, 9999));\r\n        $discData = array_rand($discretionaryData);\r\n        $LRC_array = array(\" \", rand(1, 9));\r\n        $LRC = array_rand($LRC_array);\r\n\n        // Source - http://en.wikipedia.org/wiki/Magnetic_stripe_card#Financial_cards\r\n        // Start sentinel ó one character (generally ';')\r\n        // Primary account number (PAN) ó up to 19 characters. Usually, but not always, matches the credit card\r\n        // \tnumber printed on the front of the card.\r\n        // Separator ó one char (generally '=')\r\n        // Expiration date ó four characters in the form YYMM.\r\n        // Service code ó three digits. The first digit specifies the interchange rules, the second specifies\r\n        // \tauthorisation processing and the third specifies the range of services\r\n        // Discretionary data ó as in track one\r\n        // End sentinel ó one character (generally '?')\r\n        // Longitudinal redundancy check (LRC) ó it is one character and a validity character calculated from\r\n        // \tother data on the track.\r\n        // Most reader devices do not return this value when the card is swiped to the presentation layer, and\r\n        // \tuse it only to verify the input internally to the reader.\r\n        $track2 = \";$generatedCardNumber={$calendar}{$serviceCode}$discretionaryData[$discData]?$LRC_array[$LRC]\";\r\n\n        return array(\r\n            \"display\" => $track2\r\n        );\r\n    }\r\n*/\r\n//# sourceMappingURL=Track2.generator.js.map","references":["/Users/benkeen/generatedata/types/dataTypes.d.ts"],"map":"{\"version\":3,\"file\":\"Track2.generator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/plugins/dataTypes/Track2/Track2.generator.ts\"],\"names\":[],\"mappings\":\"AAKA,MAAM,CAAC,IAAM,QAAQ,GAAG;IACvB,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF,IAAI,WAAW,GAAG,KAAK,CAAC;AAExB,IAAM,SAAS,GAAG,UAAC,CAAM;IACxB,IAAI,CAAC,WAAW,EAAE;QACjB,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAClD,WAAW,GAAG,IAAI,CAAC;KACnB;IAED,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzB,CAAC,CAAC;AAGF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgDE\"}"}
