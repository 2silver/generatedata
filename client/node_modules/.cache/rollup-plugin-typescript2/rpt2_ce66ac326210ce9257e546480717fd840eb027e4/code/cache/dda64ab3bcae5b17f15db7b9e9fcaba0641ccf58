{"code":"// data: DTGenerationData\r\nexport var generate = function () {\r\n    return { display: '' };\r\n};\r\nvar utilsLoaded = false;\r\nvar onmessage = function (e) {\r\n    if (!utilsLoaded) {\r\n        importScripts(e.data.workerResources.workerUtils);\r\n        utilsLoaded = true;\r\n    }\r\n    postMessage(generate());\r\n};\r\n/*\r\n    // custom member vars for this Data Type\r\n    private $rSIREN = '';\r\n    private $rNIC = '';\r\n\n    public function generate($generator, $generationContextData) {\r\n        $myOption = $generationContextData[\"generationOptions\"];\r\n\n        self::generateSiret();\r\n        if ($myOption == \"SIRET\") {\r\n            $myResult = self::getSIREN() . '-' . self::getNIC();\r\n        } else {\r\n            $myResult = self::getSIREN();\r\n        }\r\n\n        return array(\r\n            \"display\" => $myResult\r\n        );\r\n    }\r\n\n    private function generateSiret() {\r\n        $sumSiren = 0;\r\n        $sumSiret = 0;\r\n        $cleSiren= 1;\r\n        $cleSiret= 2;\r\n        $minRan = 0;\r\n        $maxRan = 9;\r\n        $siren = '';\r\n\n        // generation d'un siren valide\r\n        for ($i=0; $i<8; $i++) {\r\n\n            // on génére un nombre entre 0 et 9\r\n            $rand = mt_rand($minRan, $maxRan);\r\n\n            // on concatène se nombre au siret\r\n            $siren .= $rand;\r\n\n             * Le numéro SIRET est composé de 14 chiffres,\r\n             *  dont un chiffre de contrôle (le dernier) qui permet de vérifier la validité du numéro de SIRET (SIREN + NIC).\r\n             *   Celui-ci est calculé suivant la formule de Luhn.\r\n             *   Le principe est le suivant : on multiplie les chiffres de rang impair à partir de la droite par 1, ceux de rang pair par 2 ;\r\n             *    la somme des chiffres obtenus doit être multiple de 10.\r\n            $ctrlSiren = $rand * $cleSiren;\r\n            $ctrlSiret = $rand * $cleSiret;\r\n\n            // Si la valeur obtenu et supérieur ou egale à 10 il faut décomposer en 1+0\r\n            // ce qui équivaux à lui retirer 9\r\n            // contôle pour le siren\r\n            if ($ctrlSiren > 9) {\r\n                $sumSiren += ($ctrlSiren-9);\r\n            } else {\r\n                $sumSiren += $ctrlSiren;\r\n            }\r\n\n            // contôle pour le siret\r\n            if ($ctrlSiret > 9) {\r\n                $sumSiret += ($ctrlSiret - 9);\r\n            } else {\r\n                $sumSiret += $ctrlSiret;\r\n            }\r\n\n            // mise à jour des clés\r\n            if ($cleSiren == 1) {\r\n                $cleSiren = 2;\r\n                $cleSiret = 1;\r\n            } else {\r\n                $cleSiren = 1;\r\n                $cleSiret = 2;\r\n            }\r\n        }\r\n\n        // la somme doit être congrue à zéro modulo 10\r\n        $moduloSiren = ($sumSiren % 10);\r\n        if ($moduloSiren == 0) {\r\n            $diffSiren = 0;\r\n        } else {\r\n            $diffSiren = 10 - $moduloSiren;\r\n        }\r\n\n        $siren .= $diffSiren;\r\n\n        // la cle du siren est ajouté au calcul du siret\r\n        $ctrlSiret = $diffSiren * $cleSiret;\r\n\n        // contôle pour le siret\r\n        if ($ctrlSiret > 9) {\r\n            $sumSiret += ($ctrlSiret - 9);\r\n        } else {\r\n            $sumSiret += $ctrlSiret;\r\n        }\r\n\n        // aon ajoute un début de NIC au siren\r\n        $siret = $siren . \"0000\";\r\n\n        // la somme doit être congrue à zéro modulo 10\r\n        $moduloSiret = ($sumSiret % 10);\r\n        if ($moduloSiret == 0) {\r\n            $diffSiret = 0;\r\n        } else {\r\n            $diffSiret = 10 - $moduloSiret;\r\n        }\r\n\n        $siret .= $diffSiret;\r\n\n        $this->rSIREN = substr($siret, 0, 9);\r\n        $this->rNIC = substr($siret, 9, 14);\r\n    }\r\n\n    public function getRowGenerationOptionsUI($generator, $post, $colNum, $numCols) {\r\n        if (!isset($post[\"dtOption_$colNum\"]) || empty($post[\"dtOption_$colNum\"])) {\r\n            return false;\r\n        }\r\n        return $post[\"dtOption_$colNum\"];\r\n    }\r\n\n    public function getRowGenerationOptionsAPI($generator, $post, $colNum, $numCols) {\r\n        if (!isset($post[\"dtOption_$colNum\"]) || empty($post[\"dtOption_$colNum\"])) {\r\n            return false;\r\n        }\r\n        return $post[\"dtOption_$colNum\"];\r\n    }\r\n\n    public function getDataTypeMetadata() {\r\n        return array(\r\n            \"SQLField\" => \"varchar(14)\",\r\n            \"SQLField_Oracle\" => \"varchar2(14)\",\r\n            \"SQLField_MSSQL\" => \"VARCHAR(14) NULL\"\r\n        );\r\n    }\r\n\n    public function getSIREN() {\r\n        return $this->rSIREN;\r\n    }\r\n\n    public function getNIC() {\r\n        return $this->rNIC;\r\n    }\r\n*/\r\n//# sourceMappingURL=SIRET.generator.js.map","references":["/Users/benkeen/generatedata/types/dataTypes.d.ts"],"map":"{\"version\":3,\"file\":\"SIRET.generator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/plugins/dataTypes/SIRET/SIRET.generator.ts\"],\"names\":[],\"mappings\":\"AAEA,yBAAyB;AACzB,MAAM,CAAC,IAAM,QAAQ,GAAG;IACvB,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;AACxB,CAAC,CAAC;AAGF,IAAI,WAAW,GAAG,KAAK,CAAC;AAExB,IAAM,SAAS,GAAG,UAAC,CAAM;IACxB,IAAI,CAAC,WAAW,EAAE;QACjB,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAClD,WAAW,GAAG,IAAI,CAAC;KACnB;IAED,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzB,CAAC,CAAC;AAGF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA0IE\"}"}
