{"code":"var workerResources;\r\nvar loadedDataTypeWorkers = {};\r\nvar dataTypeWorkerMap = {};\r\nvar countryData = {};\r\nvar workerQueue = {};\r\nvar context = self;\r\nvar isPaused = false;\r\nvar onContinueData = null;\r\nvar currentSpeed;\r\ncontext.onmessage = function (e) {\r\n    if (e.data.action === 'PAUSE') {\r\n        isPaused = true;\r\n        return;\r\n    }\r\n    else if (e.data.action === 'ABORT') {\r\n        isPaused = true;\r\n        return;\r\n    }\r\n    else if (e.data.action === 'CONTINUE') {\r\n        isPaused = false;\r\n        var data = onContinueData.data, numBatches_1 = onContinueData.numBatches, batchSize_1 = onContinueData.batchSize, batchNum = onContinueData.batchNum;\r\n        generateNextBatch(data, numBatches_1, batchSize_1, batchNum);\r\n        return;\r\n    }\r\n    else if (e.data.action === 'CHANGE_SPEED') {\r\n        currentSpeed = e.data.speed;\r\n        return;\r\n    }\r\n    var _a = e.data, batchSize = _a.batchSize, numResults = _a.numResults, speed = _a.speed;\r\n    currentSpeed = speed;\r\n    workerResources = e.data.workerResources;\r\n    dataTypeWorkerMap = workerResources.dataTypes;\r\n    // load the Data Type generator web worker files\r\n    Object.keys(dataTypeWorkerMap).forEach(function (dataType) {\r\n        if (!loadedDataTypeWorkers[dataType]) {\r\n            loadedDataTypeWorkers[dataType] = new Worker(dataTypeWorkerMap[dataType]);\r\n        }\r\n    });\r\n    // here we load ALL country data types. :( I tried to avoid doing this and have the specific Data Type that needs them\r\n    // load them on the fly - that would obviously be a much cleaner solution; requests would only get made as needed.\r\n    // But it proved too problematic: *possibly* multiple requests to the same endpoint within different Data Type web workers\r\n    // make a separate request (looks like it doesn't though), but even if not, each web worker will get a copy of the\r\n    // data in their scope. Since Country data can be non trivial in size, this isn't great. I didn't want to bloat up\r\n    // the memory usage any more than necessary during data generation - it's already a serious issue. Instead this loads\r\n    // everything up front, once, and makes it available for any data type that wants it\r\n    // Possibly we could look at the data types and only bother doing this step if one of them requires country data. But\r\n    // that should be a clean API & easy to debug\r\n    Object.keys(workerResources.countries).forEach(function (country) {\r\n        if (!countryData[country]) {\r\n            importScripts(workerResources.countries[country]);\r\n            // @ts-ignore\r\n            countryData[country] = context[country](e.data.i18n.countries[country]);\r\n        }\r\n    });\r\n    var numBatches = Math.ceil(numResults / batchSize);\r\n    generateNextBatch(e.data, numBatches, batchSize, 1);\r\n};\r\nvar generateNextBatch = function (data, numBatches, batchSize, batchNum) {\r\n    var _a = getBatchInfo(data.numResults, numBatches, batchSize, batchNum), firstRow = _a.firstRow, lastRow = _a.lastRow;\r\n    if (isPaused) {\r\n        onContinueData = {\r\n            data: data,\r\n            numBatches: numBatches,\r\n            batchSize: batchSize,\r\n            batchNum: batchNum\r\n        };\r\n        return;\r\n    }\r\n    var lagTime = (100 - currentSpeed) * 50;\r\n    setTimeout(function () {\r\n        generateBatch({\r\n            template: data.template,\r\n            numResults: data.numResults,\r\n            unchanged: data.unchanged || {},\r\n            i18n: data.i18n,\r\n            firstRow: firstRow,\r\n            lastRow: lastRow,\r\n            batchNum: batchNum\r\n        })\r\n            .then(function () {\r\n            if (batchNum === numBatches) {\r\n                return;\r\n            }\r\n            generateNextBatch(data, numBatches, batchSize, batchNum + 1);\r\n        });\r\n    }, lagTime);\r\n};\r\nvar getBatchInfo = function (numResults, numBatches, batchSize, batchNum) {\r\n    var firstRow = ((batchNum - 1) * batchSize) + 1;\r\n    var lastRow = batchNum * batchSize;\r\n    if (batchNum === numBatches) {\r\n        lastRow = numResults;\r\n    }\r\n    return {\r\n        firstRow: firstRow,\r\n        lastRow: lastRow\r\n    };\r\n};\r\n// this resolve the promise for every batch of data generated\r\nvar generateBatch = function (_a) {\r\n    var template = _a.template, unchanged = _a.unchanged, numResults = _a.numResults, i18n = _a.i18n, firstRow = _a.firstRow, lastRow = _a.lastRow, batchNum = _a.batchNum;\r\n    return new Promise(function (resolve) {\r\n        var rowPromises = [];\r\n        // rows are independent! The only necessarily synchronous bit is between process batches. So here we just run\r\n        // them all in a loop\r\n        for (var rowNum = firstRow; rowNum <= lastRow; rowNum++) {\r\n            var currRowData = [];\r\n            rowPromises.push(processBatchSequence(template, rowNum, i18n, currRowData, unchanged));\r\n        }\r\n        Promise.all(rowPromises)\r\n            .then(function (generatedData) {\r\n            resolve();\r\n            context.postMessage({\r\n                completedBatchNum: batchNum,\r\n                numGeneratedRows: lastRow,\r\n                numResults: numResults,\r\n                generatedData: generatedData\r\n            });\r\n        });\r\n    });\r\n};\r\nvar processBatchSequence = function (generationTemplate, rowNum, i18n, currRowData, unchanged) {\r\n    var processBatches = Object.keys(generationTemplate);\r\n    return new Promise(function (resolveAll) {\r\n        var sequence = Promise.resolve();\r\n        // process each batch sequentially. This ensures the data generated from one processing batch is available to any\r\n        // dependent children. For example, the Region data type needs the Country data being generated first so it\r\n        // knows what country regions to generate if a mapping had been selected in the UI\r\n        processBatches.forEach(function (processBatchNumberStr, batchIndex) {\r\n            var processBatchNum = parseInt(processBatchNumberStr, 10);\r\n            var currBatch = generationTemplate[processBatchNum];\r\n            // yup. We're mutating the currRowData param on each loop. We don't care hhahaha!!! Up yours, linter!\r\n            sequence = sequence\r\n                .then(function () { return processDataTypeBatch(currBatch, rowNum, i18n, currRowData, unchanged); })\r\n                .then(function (promises) {\r\n                // this bit's sneaky. It ensures that the CURRENT batch within the row being generated is fully processed\r\n                // before starting the next. That way, the generated data from earlier batches is available to later\r\n                // Data Types for generating their own data\r\n                return new Promise(function (resolveBatch) {\r\n                    Promise.all(promises)\r\n                        .then(function (singleBatchResponses) {\r\n                        for (var i = 0; i < singleBatchResponses.length; i++) {\r\n                            currRowData.push({\r\n                                id: currBatch[i].id,\r\n                                colIndex: currBatch[i].colIndex,\r\n                                dataType: currBatch[i].dataType,\r\n                                data: singleBatchResponses[i]\r\n                            });\r\n                        }\r\n                        resolveBatch();\r\n                        if (batchIndex === processBatches.length - 1) {\r\n                            currRowData.sort(function (a, b) { return a.colIndex < b.colIndex ? -1 : 1; });\r\n                            resolveAll(currRowData.map(function (row) { return row.data; }));\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\nvar processDataTypeBatch = function (cells, rowNum, i18n, currRowData, unchanged) {\r\n    return cells.map(function (currCell) {\r\n        var dataType = currCell.dataType;\r\n        return new Promise(function (resolve, reject) {\r\n            if (unchanged[currCell.colIndex]) {\r\n                resolve(unchanged[currCell.colIndex][rowNum - 1]);\r\n            }\r\n            else {\r\n                queueJob(dataType, {\r\n                    rowNum: rowNum,\r\n                    i18n: i18n.dataTypes[dataType],\r\n                    countryI18n: i18n.countries,\r\n                    rowState: currCell.rowState,\r\n                    existingRowData: currRowData,\r\n                    countryData: countryData,\r\n                    workerResources: {\r\n                        workerUtils: workerResources.workerUtils\r\n                    }\r\n                }, resolve, reject);\r\n            }\r\n        });\r\n    });\r\n};\r\nvar queueJob = function (dataType, payload, resolve, reject) {\r\n    if (!workerQueue[dataType]) {\r\n        workerQueue[dataType] = {\r\n            processing: false,\r\n            queue: []\r\n        };\r\n    }\r\n    workerQueue[dataType].queue.push({\r\n        payload: payload,\r\n        resolve: resolve,\r\n        reject: reject\r\n    });\r\n    processQueue(dataType);\r\n};\r\nvar processQueue = function (dataType) {\r\n    if (workerQueue[dataType].processing) {\r\n        return;\r\n    }\r\n    var queue = workerQueue[dataType].queue;\r\n    var worker = loadedDataTypeWorkers[dataType];\r\n    if (!queue.length) {\r\n        return;\r\n    }\r\n    workerQueue[dataType].processing = true;\r\n    var _a = queue[0], payload = _a.payload, resolve = _a.resolve, reject = _a.reject;\r\n    worker.postMessage(payload);\r\n    // Data Type generator functions can be sync or async, depending on their needs. This method calls the generator\r\n    // method for all data types in a particular process batch and returns an array of promises, which when resolved,\r\n    // returns the generated data for that row\r\n    worker.onmessage = function (response) {\r\n        // TODO this isn't used and looks fishy\r\n        if (typeof response.then === 'function') {\r\n            response\r\n                .then(function () {\r\n                resolve(response.data);\r\n                processNextItem(dataType);\r\n            });\r\n        }\r\n        else {\r\n            resolve(response.data);\r\n            processNextItem(dataType);\r\n        }\r\n    };\r\n    worker.onerror = function (resp) {\r\n        reject(resp);\r\n        processNextItem(dataType);\r\n    };\r\n};\r\nvar processNextItem = function (dataType) {\r\n    workerQueue[dataType].queue.shift();\r\n    workerQueue[dataType].processing = false;\r\n    processQueue(dataType);\r\n};\r\n//# sourceMappingURL=dataTypes.worker.js.map","references":["/Users/benkeen/generatedata/client/src/_plugins.tsx"],"map":"{\"version\":3,\"file\":\"dataTypes.worker.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/core/generator/dataTypes.worker.ts\"],\"names\":[],\"mappings\":\"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\"}"}
