{"code":"export var rowStateReducer = function (_a) {\r\n    var formats = _a.formats, example = _a.example;\r\n    return ({\r\n        formats: formats,\r\n        ccCard: example\r\n    });\r\n};\r\n// data: GenerationData\r\nexport var generate = function () {\r\n    // creditCardFormats[data.example]\r\n    return { display: '' };\r\n};\r\n/*\r\n    public function __construct($runtimeContext) {\r\n        for ($i=622126; $i<=622925; $i++) {\r\n            self::$creditCardData[\"discover\"][] = $i;\r\n        }\r\n        for ($i=3528; $i<=3589; $i++) {\r\n            self::$creditCardData[\"jcb16\"][] = $i;\r\n        }\r\n        parent::__construct($runtimeContext);\r\n    }\r\n\n    public function generate($generator, $generationContextData) {\r\n        $options = $generationContextData[\"generationOptions\"];\r\n\n        if ($options[\"cc_brand\"] == \"rand_card\") {\r\n            $options = $this->setRandomCardInfo($options);\r\n        }\r\n\n        $ccLength    = self::getRandomPANLength($options[\"cc_length\"]);\r\n        $ccFormat    = self::getRandomPANFormat($options[\"cc_format\"], $ccLength);\r\n        $ccSeparator = self::getRandomPANSeparator($options[\"cc_separator\"]);\r\n\n        $ccData = self::getCreditCardData($options[\"cc_brand\"]);\r\n        $card = self::generateCreditCardNumber($ccData[\"prefix\"], $ccLength);\r\n        $cardNumber = $this->convertFormat($ccLength, $ccFormat, $ccSeparator, $card);\r\n\n        if (empty($cardNumber)) {\r\n            $cardNumber = \"$ccLength, $ccFormat, {$options[\"cc_brand\"]}, {$options[\"cc_format\"]}\";\r\n        }\r\n        return array(\r\n            \"display\" => $cardNumber\r\n        );\r\n    }\r\n\n    public function setRandomCardInfo($options) {\r\n        $selectedCard = $options[\"cc_random_card\"][array_rand($options[\"cc_random_card\"])];\r\n\n        if ($selectedCard == \"jcb\") {\r\n            $jcbCards = array(\"jcb15\", \"jcb16\");\r\n            $selectedCard = $jcbCards[mt_rand(0, 1)];\r\n        }\r\n\n        $cardData = self::getCreditCardData($selectedCard);\r\n\n        $options[\"cc_brand\"] = $selectedCard;\r\n        $options[\"cc_format\"] = $cardData[\"formats\"][array_rand($cardData[\"formats\"])];\r\n        $options[\"cc_length\"] = self::getRandomPANLength($cardData[\"length\"]);\r\n\n        return $options;\r\n    }\r\n\n    * @param $ccLength\r\n     * @param $ccFormat\r\n     * @param $ccSeparator\r\n     * @param $ccNumber\r\n     * @return array|bool|string\r\n    private static function convertFormat($ccLength, $ccFormat, $ccSeparator, $ccNumber) {\r\n\n        // TODO pity we need this extra test on each call\r\n        if ($ccLength == strlen($ccNumber)) {\r\n            $a = self::convertXtoNumber($ccFormat, $ccNumber);\r\n\n            if ($a == $ccNumber) {\r\n                return $a;\r\n            } else {\r\n                return implode($ccSeparator, $a);\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\n     * Convert X's to the specified number\r\n    private static function convertXtoNumber($chosen_format, $ccnumber){\r\n        $positions = array();\r\n        $pos = -1;\r\n        while (($pos = strpos($chosen_format, \" \", $pos+1)) !== false) {\r\n            $positions[] = $pos;\r\n        }\r\n\n        if (empty($positions)) {\r\n            return $ccnumber;\r\n        }\r\n\n        $result   = array();\r\n        $result_f = array();\r\n        $j = 1;\r\n\n        $numPositions = count($positions);\r\n        for ($i=0; $i<$numPositions; $i++) {\r\n            $result[$i] = substr($ccnumber, 0, $positions[$i]-$i);\r\n        }\r\n\n        $result_f[0] = ($result[0]);\r\n        for ($i=0; $i<$numPositions-1; $i++) {\r\n            $result_f[$j] = substr($result[$j], $positions[$i]-$i);\r\n            $j++;\r\n        }\r\n        $result_f[$numPositions] = substr($ccnumber, ($positions[$numPositions-1])-($numPositions-1));\r\n\n        return $result_f;\r\n    }\r\n\n\n    // very confusing function. What does this do exactly? Why is it necessary?\r\n    private static function getRandomPANFormat($userSelectedFormats, $randCardLength) {\r\n\n        // if no format is selected then by default continuous number of that length will be displayed\r\n        $defaultFormat = str_repeat(\"X\", $randCardLength);\r\n        if (empty($userSelectedFormats)) {\r\n            return $defaultFormat;\r\n        }\r\n\n        // for ease of use, the API lets you pass formats as an array\r\n        $formats = (is_array($userSelectedFormats)) ? $userSelectedFormats : explode(\"\\n\", $userSelectedFormats);\r\n\n        $matchingFormats = array();\r\n        foreach ($formats as $currFormat) {\r\n            $count_X = 0; // get count of X's to match with the card length\r\n\n            $len = strlen($currFormat);\r\n            for ($i=0; $i<$len; $i++) {\r\n                if ($currFormat[$i] == \"X\") { // PHP version of a charAt\r\n                    $count_X++;\r\n                }\r\n            }\r\n            if ($count_X == $randCardLength) {\r\n                $matchingFormats[] = $currFormat;\r\n            }\r\n        }\r\n\n        if (empty($matchingFormats)) {\r\n            return $defaultFormat;\r\n        } else {\r\n            $chosenFormat = $matchingFormats[mt_rand(0, count($matchingFormats)-1)];\r\n            return trim($chosenFormat);\r\n        }\r\n    }\r\n\n    private static function getRandomPANSeparator($separators) {\r\n        $separatorList = explode(\"|\", $separators);\r\n        $chosenSep = $separatorList[rand(0, count($separatorList)-1)];\r\n\n        // if no separator was entered\r\n        if ($separators == \"\") {\r\n            $chosenSep = \" \";\r\n        }\r\n        return $chosenSep;\r\n    }\r\n\n    private static function getRandomPANLength($userSelectedLength) {\r\n        // if there's more than 1 card length then pick a random one\r\n        if ($userSelectedLength == \"12-19\") {\r\n            $userSelectedLength = \"12,13,14,15,16,17,18,19\";\r\n        } else if ($userSelectedLength == \"16-19\") {\r\n            $userSelectedLength = \"16,17,18,19\";\r\n        }\r\n\n        $lengths = explode(\",\", $userSelectedLength);\r\n        $chosenLength = 0;\r\n        if (count($lengths) >= 1) {\r\n            $chosenLength = $lengths[mt_rand(0, count($lengths)-1)];\r\n        }\r\n\n        return $chosenLength;\r\n    }\r\n\n    // --------------------------------------------------------------------------------------------\r\n    // Public functions\r\n\n    public static function getCreditCardData($ccBrand) {\r\n        $data = array();\r\n        reset(self::$creditCardData);\r\n        while (list($currBrand, $ccData) = each(self::$creditCardData)) {\r\n            if ($ccBrand != $currBrand) {\r\n                continue;\r\n            }\r\n            $data = $ccData;\r\n        }\r\n        return $data;\r\n    }\r\n\n    public static function getAllCreditCardData() {\r\n        return self::$creditCardData;\r\n    }\r\n*/\r\n// const generateCreditCardNumber = (prefixList: string[], length: number) => {\r\n// \t// why is this call ccNumber? It was a prefix...\r\n// \tconst ccNumber = getRandomArrayValue(prefixList);\r\n// // generate digits\r\n// $count = strlen($ccNumber);\r\n// while ($count < ($length - 1)) {\r\n// \t$ccNumber .= mt_rand(0, 9);\r\n// \t$count++;\r\n// }\r\n// // calculate sum\r\n// $sum = 0;\r\n// $pos = 0;\r\n// $reversedCCnumber = strrev($ccNumber);\r\n// while ($pos < $length - 1) {\r\n// \t$odd = $reversedCCnumber[$pos]*2;\r\n// \tif ($odd > 9) {\r\n// \t\t$odd -= 9;\r\n// \t}\r\n// \t$sum += $odd;\r\n// \tif ($pos != ($length - 2)) {\r\n// \t\t$sum += $reversedCCnumber[$pos+1];\r\n// \t}\r\n// \t$pos += 2;\r\n// }\r\n// // calculate check digit\r\n// $checkDigit = ((floor($sum/10) + 1) * 10 - $sum) % 10;\r\n// $ccNumber .= $checkDigit;\r\n// return $ccNumber;\r\n// }\r\nexport var getMetadata = function () { return ({\r\n    sql: {\r\n        field: 'varchar(255)',\r\n        field_Oracle: 'varchar2(255)',\r\n        field_MSSQL: 'VARCHAR(255) NULL'\r\n    }\r\n}); };\r\n//# sourceMappingURL=PAN.generator.js.map","references":["/Users/benkeen/generatedata/client/types/dataTypes.d.ts","/Users/benkeen/generatedata/client/src/plugins/dataTypes/PAN/PAN.tsx"],"map":"{\"version\":3,\"file\":\"PAN.generator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/plugins/dataTypes/PAN/PAN.generator.ts\"],\"names\":[],\"mappings\":\"AAMA,MAAM,CAAC,IAAM,eAAe,GAAG,UAAC,EAA8B;QAA5B,OAAO,aAAA,EAAE,OAAO,aAAA;IAAsB,OAAA,CAAC;QACxE,OAAO,SAAA;QACP,MAAM,EAAE,OAAO;KACf,CAAC;AAHsE,CAGtE,CAAC;AAEH,uBAAuB;AACvB,MAAM,CAAC,IAAM,QAAQ,GAAG;IACvB,kCAAkC;IAElC,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyLE;AAEF,+EAA+E;AAE/E,oDAAoD;AACpD,qDAAqD;AAErD,qBAAqB;AACrB,8BAA8B;AAC9B,mCAAmC;AACnC,+BAA+B;AAC/B,aAAa;AACb,IAAI;AAEJ,mBAAmB;AACnB,YAAY;AACZ,YAAY;AAEZ,yCAAyC;AACzC,+BAA+B;AAC/B,qCAAqC;AACrC,mBAAmB;AACnB,eAAe;AACf,KAAK;AACL,iBAAiB;AAEjB,gCAAgC;AAChC,uCAAuC;AACvC,KAAK;AACL,cAAc;AACd,IAAI;AAEJ,2BAA2B;AAC3B,yDAAyD;AACzD,4BAA4B;AAE5B,oBAAoB;AACpB,IAAI;AAEJ,MAAM,CAAC,IAAM,WAAW,GAAG,cAAkB,OAAA,CAAC;IAC7C,GAAG,EAAE;QACJ,KAAK,EAAE,cAAc;QACrB,YAAY,EAAE,eAAe;QAC7B,WAAW,EAAE,mBAAmB;KAChC;CACD,CAAC,EAN2C,CAM3C,CAAC\"}"}
