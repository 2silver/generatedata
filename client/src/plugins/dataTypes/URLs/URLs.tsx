import * as React from 'react';
import Button from '@material-ui/core/Button';
import { DTExampleProps, DTMetadata, DTOptionsProps } from '~types/dataTypes';
import { Dialog, DialogActions, DialogContent, DialogTitle } from '~components/dialogs';
import Dropdown from '~components/dropdown/Dropdown';
import CheckboxPill from '~components/pills/CheckboxPill';
import styles from './URLs.scss';

export const initialState = {
	example: '',
	protocolEnabled: true,
	protocolOptions: 'http,https',
	hostnameEnabled: true,
	hostnameOptions: 'facebook.com,google.com,instagram.com,bbc.co.uk,guardian.co.uk,nytimes.com,cnn.com,youtube.com,wikipedia.org,netflix.com,twitter.com,whatsapp.com,zoom.us,reddit.com,naver.com,pinterest.com,yahoo.com,baidu.com,walmart.com,ebay.com',
	pathEnabled: false,
	pathOptions: '',
	queryParamsEnabled: false,
	queryParamsOptions: ''
};

export const Example = ({ i18n, data, onUpdate }: DTExampleProps): JSX.Element => {
	const onChange = (value: any): void => {
		onUpdate({
			...data,
			example: value
		});
	};

	const options = [
		{ value: 'protocol://', label: 'protocol://' },
		{ value: 'protocol://hostname', label: 'protocol://hostname' },
		{ value: 'hostname', label: 'hostname' },
		{ value: 'protocol://hostname/path', label: 'protocol://hostname/path' },
		{ value: 'protocol://hostname/path?queryparams', label: 'protocol://hostname/path?queryparams' },
		{ value: 'protocol://hostname/?queryparams', label: 'protocol://hostname/?queryparams' },
	];

	return (
		<Dropdown
			value={data.example}
			onChange={(i: any): void => onChange(i.value)}
			options={options}
		/>
	);
};

const URLsDialog = ({
	visible, data, id, onClose, onUpdate, coreI18n
}: any): JSX.Element => {
	return (
		<Dialog onClose={onClose} open={visible}>
			<div style={{ width: 500 }}>
				<DialogTitle onClose={onClose}>Customize URLs</DialogTitle>
				<DialogContent dividers>
					<div>
						Use the fields below to customize the format of the URLs generated by this field. The text fields
						contain comma-delimited options that will be used for that section of the URL.
					</div>

					<h3>{coreI18n.options}</h3>

					<blockquote className={styles.optionsView}>
						<pre>
							<span className={data.protocolEnabled ? styles.enabledSection : styles.disabledSection}>protocol://</span>
							<span className={data.hostnameEnabled ? styles.enabledSection : styles.disabledSection}>hostname</span>
							<span className={data.pathEnabled ? styles.enabledSection : styles.disabledSection}>/path</span>
							<span className={data.queryParamsEnabled ? styles.enabledSection : styles.disabledSection}>?queryparams</span>
						</pre>
					</blockquote>

					<div>
						<div className={styles.settingsRow}>
							<div className={styles.firstCol}>
								<CheckboxPill
									label={"Protocol"}
									onClick={() => onUpdate({ ...data, protocolEnabled: !data.protocolEnabled })}
									name={`protocol-${id}`}
									checked={data.protocolEnabled}
								/>
							</div>
							<div className={styles.secondCol}>
								<input
									type="text"
									value={data.protocolOptions}
									onChange={(e) => onUpdate({ ...data, protocolOptions: e.target.value })}
									disabled={!data.protocolEnabled}
								/>
							</div>
						</div>
						<div className={styles.settingsRow}>
							<div className={styles.firstCol}>
								<CheckboxPill
									label={"Hostname"}
									onClick={() => onUpdate({ ...data, hostnameEnabled: !data.hostnameEnabled })}
									name={`hostname-${id}`}
									checked={data.hostnameEnabled}
								/>
							</div>
							<div className={styles.secondCol}>
								<input
									type="text"
									value={data.hostnameOptions}
									disabled={!data.hostnameEnabled}
								/>
							</div>
						</div>
						<div className={styles.settingsRow}>
							<div className={styles.firstCol}>
								<CheckboxPill
									label={"Path"}
									onClick={() => onUpdate({ ...data, pathEnabled: !data.pathEnabled })}
									name={`path-${id}`}
									checked={data.pathEnabled}
								/>
							</div>
							<div className={styles.secondCol}>
								<input
									type="text"
									value="one,subfolder/path,two/three"
									disabled={!data.pathEnabled}
								/>
							</div>
						</div>
						<div className={styles.settingsRow}>
							<div className={styles.firstCol}>
								<CheckboxPill
									label={"Query Params"}
									onClick={() => onUpdate({ ...data, queryParamsEnabled: !data.queryParamsEnabled })}
									name={`queryParams-${id}`}
									checked={data.queryParamsEnabled}
								/>
							</div>
							<div className={styles.secondCol}>
								<input
									type="text"
									value="search=1"
									disabled={!data.queryParamsEnabled}
								/>
							</div>
						</div>
					</div>

				</DialogContent>
				<DialogActions>
					<Button onClick={onClose} color="primary" variant="outlined">{coreI18n.close}</Button>
				</DialogActions>
			</div>
		</Dialog>
	);
};

export const Options = ({ i18n, id, coreI18n, data, onUpdate }: DTOptionsProps): JSX.Element => {
	const [visible, setDialogVisibility] = React.useState(false);

	return (
		<>
			<Button
				onClick={(): void => setDialogVisibility(true)}
				variant="outlined"
				color="primary"
				size="small"
				className={styles.buttonLabel}>
				{coreI18n.options}
			</Button>
			<URLsDialog
				visible={visible}
				id={id}
				data={data}
				onUpdate={onUpdate}
				coreI18n={coreI18n}
				onClose={() => setDialogVisibility(false)}
			/>
		</>
	);
};

export const getMetadata = (): DTMetadata => ({
	general: {
		dataType: 'string'
	},
	sql: {
		field: 'varchar(255)',
		field_Oracle: 'varchar2(255)',
		field_MSSQL: 'VARCHAR(255) NULL'
	}
});
