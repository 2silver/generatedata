import * as React from 'react';
import Button from '@material-ui/core/Button';
import { DTExampleProps, DTMetadata, DTOptionsProps } from '~types/dataTypes';
import { Dialog, DialogActions, DialogContent, DialogTitle } from '~components/dialogs';
import CheckboxPill from '~components/pills/CheckboxPill';
import sharedStyles from '../../../styles/shared.scss';
import styles from './URLs.scss';

export const initialState = {
	protocol: true,
	protocols: 'http,https',
	hostname: true,
	path: false,
	queryParams: false
};

export const Example = ({ coreI18n }: DTExampleProps): JSX.Element => (
	<div className={sharedStyles.emptyCol}>{coreI18n.seeHelpDialog}</div>
);

const URLsDialog = ({
	visible, data, id, onClose, onUpdate, coreI18n
}: any): JSX.Element => {
	return (
		<Dialog onClose={onClose} open={visible}>
			<div style={{ width: 500 }}>
				<DialogTitle onClose={onClose}>Customize URLs</DialogTitle>
				<DialogContent dividers>
					<div>
						Use the fields below to customize the format of the URLs generated by this field. The input fields
						let you customize 
					</div>

					<h3>Options</h3>

					<blockquote className={styles.optionsView}>
						<pre>
							<span className={data.protocol ? styles.enabledSection : styles.disabledSection}>protocol://</span>
							<span className={data.hostname ? styles.enabledSection : styles.disabledSection}>hostname</span>
							<span className={data.path ? styles.enabledSection : styles.disabledSection}>/path</span>
							<span className={data.queryParams ? styles.enabledSection : styles.disabledSection}>?queryparams</span>
						</pre>
					</blockquote>

					<div>
						<div className={styles.settingsRow}>
							<div className={styles.firstCol}>
								<CheckboxPill
									label={"Protocol"}
									onClick={() => onUpdate({ ...data, protocol: !data.protocol })}
									name={`protocol-${id}`}
									checked={data.protocol}
								/>
							</div>
							<div className={styles.secondCol}>
								<input
									type="text"
									value="http,https"
									disabled={!data.protocol}
								/>
							</div>
						</div>
						<div className={styles.settingsRow}>
							<div className={styles.firstCol}>
								<CheckboxPill
									label={"Hostname"}
									onClick={() => onUpdate({ ...data, hostname: !data.hostname })}
									name={`hostname-${id}`}
									checked={data.hostname}
								/>
							</div>
							<div className={styles.secondCol}>
								<input
									type="text"
									value="facebook.com,google.com"
									disabled={!data.hostname}
								/>
							</div>
						</div>
						<div className={styles.settingsRow}>
							<div className={styles.firstCol}>
								<CheckboxPill
									label={"Path"}
									onClick={() => onUpdate({ ...data, path: !data.path })}
									name={`path-${id}`}
									checked={data.path}
								/>
							</div>
							<div className={styles.secondCol}>
								<input type="text" value="one,subfolder/path,two/three" />
							</div>
						</div>
						<div className={styles.settingsRow}>
							<div className={styles.firstCol}>
								<CheckboxPill
									label={"Query Params"}
									onClick={() => onUpdate({ ...data, queryParams: !data.queryParams })}
									name={`queryParams-${id}`}
									checked={data.queryParams}
								/>
							</div>
							<div className={styles.secondCol}>
								<input type="text" value="search=1,from" />
							</div>
						</div>
					</div>

				</DialogContent>
				<DialogActions>
					<Button onClick={onClose} color="primary" variant="outlined">{coreI18n.close}</Button>
				</DialogActions>
			</div>
		</Dialog>
	);
};

export const Options = ({ i18n, id, coreI18n, data, onUpdate }: DTOptionsProps): JSX.Element => {
	const [visible, setDialogVisibility] = React.useState(false);

	return (
		<>
			<Button
				onClick={(): void => setDialogVisibility(true)}
				variant="outlined"
				color="primary"
				size="small">
				{coreI18n.options}
			</Button>
			<URLsDialog
				visible={visible}
				id={id}
				data={data}
				onUpdate={onUpdate}
				coreI18n={coreI18n}
				onClose={() => setDialogVisibility(false)}
			/>
		</>
	);
};

export const getMetadata = (): DTMetadata => ({
	general: {
		dataType: 'string'
	},
	sql: {
		field: 'varchar(255)',
		field_Oracle: 'varchar2(255)',
		field_MSSQL: 'VARCHAR(255) NULL'
	}
});
