require = require('esm')(module); // allows us to read es6 files
const fs = require('fs');
const path = require('path');
const package = require('../../package.json');
const configDefaults = require('./config.client.defaults'); // TODO use .env
const helpers = require("./helpers");

let overrides = {};
const configFile = path.join(__dirname, '..', 'config', 'config.client.js');
if (fs.existsSync(configFile)) {
	overrides = require(configFile);
}

const completeConfigFile = {
	version: package.version,
	...configDefaults.default,
	...overrides.default
};

const generateConfigFile = (filename, content) => {
	const buildFolder = path.join(__dirname, '..', 'dist');
	if (!fs.existsSync(buildFolder)) {
		fs.mkdirSync(buildFolder, { recursive: true });
	}
	const file = path.join(__dirname, '..', 'dist', filename);
	if (fs.existsSync(file)) {
		fs.unlinkSync(file);
	}
	fs.writeFileSync(file, content);
};

const createPluginsListFile = () => {
	let content = `/*
* This file is autogenerated. Do not edit! 
* ----------------------------------------
* 
* This imports all the metadata for all plugins and includes that information as part of the core bundle. All actual
* plugin files are bundled separately and loaded on-demand. 
*/

`;

	const dataTypes = helpers.getPlugins('dataTypes', []);
	dataTypes.forEach((folder) => {
		content += `import ${folder} from './plugins/dataTypes/${folder}/config';\n`;
	});
	content += `\nexport const dataTypes = {\n\t${dataTypes.join(',\n\t')}\n};\n`;
	content += '\nexport type DataTypeFolder = keyof typeof dataTypes;\n';
	content += '\nexport const blacklistedDataTypeFolders = [\'' + completeConfigFile.dataTypeBlacklist.join('\',\'') + '\'];\n\n';

	const exportTypes = helpers.getPlugins('exportTypes', completeConfigFile.exportTypeBlacklist);
	exportTypes.forEach((folder) => {
		content += `import ${folder} from './plugins/exportTypes/${folder}/config';\n`;
	});
	content += `\nexport const exportTypes = {\n\t${exportTypes.join(',\n\t')}\n};\n`;
	content += '\nexport type ExportTypeFolder = keyof typeof exportTypes;\n\n';

	// currently there's no metadata we need for countries, so we just keep track of the names
	const countries = helpers.getPlugins('countries', completeConfigFile.countryBlacklist, false);
	content += `\nexport const countryList = ['${countries.join('\', \'')}'];\n`;
	content += `export const countries = ['${countries.join('\', \'')}'] as const;\n`;

	const file = path.join(__dirname, '..', 'src/_plugins.tsx');
	if (fs.existsSync(file)) {
		fs.unlinkSync(file);
	}
	fs.writeFileSync(file, content);
};


// the import file allows anyone extending this application to define their own global imports to be included in the
// webpack bundle. Right now I'm just using this for importing google analytics for the website, but it'll get
// expanded on later for all the extra tabs (About, Donate etc.)
const createImportFile = () => {
	const importLines = [];
	completeConfigFile.importFiles.forEach((filePathFromRoot) => {
		importLines.push(`import '../${filePathFromRoot}';`);
	});

	const file = path.join(__dirname, '..', 'src/_imports.tsx');
	if (fs.existsSync(file)) {
		fs.unlinkSync(file);
	}

	// rollup gets confused with an empty file, so we add a default exports just in case
	if (!importLines.length) {
		importLines.push(`// DO NOT EDIT: This is autogenerated by a node script \nexport default {};`);
	}
	fs.writeFileSync(file, importLines.join('\n'));
};

generateConfigFile('config.client.js', `export default ${JSON.stringify(completeConfigFile, null, '\t')};`);

createPluginsListFile();
createImportFile();

// copyPluginWebWorkers();
